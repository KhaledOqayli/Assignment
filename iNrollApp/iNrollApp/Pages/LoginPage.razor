@page "/login"
@using System.Net.Http
@using System.Text
@using System.Text.RegularExpressions
@using System.Text.Json

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Login</h2>
                    <form @onsubmit="SubmitForm">
                        <div class="form-group">
                            <label for="email">Email:</label>
                            <input type="email" id="email" class="form-control" placeholder="Enter your email" @bind="@loginModel.Email" required>
                            @if (validationErrors.ContainsKey("Email"))
                            {
                                <p class="validation-error">@validationErrors["Email"]</p>
                            }
                        </div>
                        <div class="form-group">
                            <label for="password">Password:</label>
                            <input type="password" id="password" class="form-control" placeholder="Enter your password" @bind="@loginModel.Password" required>
                            @if (validationErrors.ContainsKey("Password"))
                            {
                                <p class="validation-error">@validationErrors["Password"]</p>
                            }
                        </div>
                        <button @onclick="@SubmitForm" class="btn btn-primary btn-block">Login</button>
                    </form>
                    <div class="text-center mt-3">
                        <p>Don't have an account? <a href="/RegisterPage">Register here</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .validation-error {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
    }

    .btn-primary {
        background-color: #003b49;
        border-color: #003b49;
    }

        .btn-primary:hover {
            background-color: #002733;
            border-color: #002733;
        }

</style>
@code {
    private Dictionary<string, string> validationErrors = new Dictionary<string, string>();
    private LoginModel loginModel = new LoginModel();
    @inject NavigationManager NavigationManager

    public async Task SubmitForm()
    {
        validationErrors.Clear();

        // Validate the form data
        if (string.IsNullOrWhiteSpace(loginModel.Email))
        {
            validationErrors["Email"] = "Email is required.";
        }
        else if (!Regex.IsMatch(loginModel.Email, @"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"))
        {
            validationErrors["Email"] = "Invalid email format.";
        }

        if (string.IsNullOrWhiteSpace(loginModel.Password))
        {
            validationErrors["Password"] = "Password is required.";
        }

        if (validationErrors.Count == 0)
        {
            var httpClient = new HttpClient();
            var apiUrl = "https://localhost:44305/api/Auth/login";
            var jsonContent = JsonSerializer.Serialize(loginModel);
            var httpContent = new StringContent(jsonContent, Encoding.UTF8, "application/json");
            var response = await httpClient.PostAsync(apiUrl, httpContent);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadAsStringAsync();
                NavigationManager.NavigateTo($"/dashboard?email={loginModel.Email}");
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
            }
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
