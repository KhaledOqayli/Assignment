@page "/RegisterPage"
@using System.Net.Http
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@using System.Net;

<h2 class="text-center mb-4">Register</h2>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    @if (registrationSuccess)
                    {
                        NavigateToGraduatePrograms();
                    }
                    else
                    {
                        <EditForm Model="@user" OnSubmit="RegisterUser">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label for="FirstName">First Name</label>
                                <InputText id="FirstName" @bind-Value="user.FirstName" class="form-control" />
                                <ValidationMessage For="@(() => user.FirstName)" class="text-danger" />
                            </div>

                            <div class="form-group">
                                <label for="LastName">Last Name</label>
                                <InputText id="LastName" @bind-Value="user.LastName" class="form-control" />
                                <ValidationMessage For="@(() => user.LastName)" class="text-danger" />
                            </div>

                            <div class="form-group">
                                <label for="Email">Email</label>
                                <InputText id="Email" @bind-Value="user.Email" class="form-control" />
                                <ValidationMessage For="@(() => user.Email)" class="text-danger" />
                            </div>
                            @if (!string.IsNullOrEmpty(user.EmailConflictErrorMessage))
                            {
                                <p class="text-danger">@user.EmailConflictErrorMessage</p>
                            }

                            <div class="form-group">
                                <label for="Birthdate">Birthdate</label>
                                <InputDate id="Birthdate" @bind-Value="user.Birthdate" class="form-control" />
                                <ValidationMessage For="@(() => user.Birthdate)" class="text-danger" />
                            </div>

                            <div class="form-group">
                                <label for="Photo">Photo</label>
                                <InputFile id="Photo" @bind-Value="user.Photo" class="form-control-file" OnChange="HandlePhotoChange" />
                                <ValidationMessage For="@(() => user.Photo)" class="text-danger" />
                            </div>
                            @if (photoNotUploaded)

                            {

                                <p class="text-danger">Please upload a photo.</p>
                            }
                            <div class="form-group">
                                <label for="Password">Password</label>
                                <InputText id="Password" @bind-Value="user.Password" class="form-control" type="password" />
                                <ValidationMessage For="@(() => user.Password)" class="text-danger" />
                            </div>

                            <div class="form-group">
                                <label for="ConfirmPassword">Confirm Password</label>
                                <InputText id="ConfirmPassword" @bind-Value="confirmPassword" class="form-control" type="password" />
                                <ValidationMessage For="@(() => confirmPassword)" class="text-danger" />
                                @if (!string.IsNullOrEmpty(confirmPassword) && user.Password != confirmPassword)
                                {
                                    <p class="text-danger">Passwords do not match.</p>
                                }
                            </div>

                            <div class="form-group text-center">
                                <button type="submit" class="btn btn-primary">Register</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserModel user = new UserModel();
    private string confirmPassword = "";
    private bool registrationSuccess = false;
    bool photoNotUploaded = false;
    @inject NavigationManager navigationManager;

    private async Task RegisterUser()
    {
        try
        {
            photoNotUploaded = string.IsNullOrEmpty(user.Photo);
            // Check if passwords match
            if (user.Password != confirmPassword && photoNotUploaded)
            {
                return;
            }

            var httpClient = new HttpClient();
            var response = await httpClient.PostAsJsonAsync("https://localhost:44305/api/Auth/register", user);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<ApiResponse>();
                if (responseData.Message is "User registered successfully")
                {
                    Console.WriteLine("User registered successfully");
                    registrationSuccess = true;

                    NavigateToGraduatePrograms();
                }
                else
                {
                    Console.WriteLine("Registration failed");
                }
            }
            else if (response.StatusCode == HttpStatusCode.Conflict)
            {
                user.EmailConflictErrorMessage = "Email is already registered.";
            }
            else
            {
                Console.WriteLine("Request failed with status: " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred: " + ex.Message);
            // Handle error
        }
    }
    private async Task HandlePhotoChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        user.Photo = Convert.ToBase64String(buffer);
    }
    private void NavigateToGraduatePrograms()
    {
        navigationManager.NavigateTo("/graduate-programs");
    }

    private class UserModel
    {
        [Required(ErrorMessage = "First Name is required")]
        [RegularExpression(@"^[A-Za-z]+$", ErrorMessage = "First Name should only contain letters")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last Name is required")]
        [RegularExpression(@"^[A-Za-z]+$", ErrorMessage = "Last Name should only contain letters")]
        public string LastName { get; set; }


        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Birthdate is required")]
        public DateTime Birthdate { get; set; }

        [Required(ErrorMessage = "Photo is required")]
        public string Photo { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        // Validation error message for email conflict
        public string EmailConflictErrorMessage { get; set; }
    }

    private class ApiResponse
    {
        public string Message { get; set; }
    }
}
